package com.springRestApi.EmployeeManagementRestApi.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@SuppressWarnings("deprecation")
@EnableWebSecurity
public class ApplicationSecurityConfiguration extends WebSecurityConfigurerAdapter {
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication()
		.withUser(User.withUsername("Anil").password(getPasswordEncoder().encode("Anil")).roles("USER"))
		.withUser(User.withUsername("Somya").password(getPasswordEncoder().encode("Somya")).roles("ADMIN"));
	}
	
	@Bean
	PasswordEncoder getPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.cors().disable();
		http.csrf().disable();
		http.authorizeRequests()
		.antMatchers(HttpMethod.POST, "/api/employees")
		.hasRole("ADMIN")
		.antMatchers(HttpMethod.PUT, "/api/employees/**")
		.hasRole("ADMIN")
		.antMatchers("/api/employees/**")
		.hasAnyRole("USER", "ADMIN")
		.anyRequest().authenticated()
		.and()
		.httpBasic();
	}
	
	
}
