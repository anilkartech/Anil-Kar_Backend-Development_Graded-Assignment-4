package com.springRestApi.EmployeeManagementRestApi.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import com.springRestApi.EmployeeManagementRestApi.model.Employee;
import com.springRestApi.EmployeeManagementRestApi.service.EmployeeService;
import com.springRestApi.EmployeeManagementRestApi.utils.AppConstants;

@RestController
@RequestMapping("/api/employees")
public class EmployeeRestController {
	@Autowired
	private EmployeeService employeeService;

	@GetMapping
	public List<Employee> fetchAllEmployees() {
		return this.employeeService.fetchAllEmployees();
	}

	@GetMapping("/{id}")
	public Employee fetchEmployeeById(@PathVariable("id") long employeeId) {
		return this.employeeService.fetchEmployeeById(employeeId);
	}

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Employee saveEmployee(@RequestBody Employee employee) {
		return this.employeeService.addEmployee(employee);
	}

	@PutMapping("/{id}")
	public Employee updateEmployee(@PathVariable("id") long employeeId, @RequestBody Employee employee) {
		return this.employeeService.updateEmployee(employeeId, employee);
	}

	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteEmployeeById(@PathVariable("id") long employeeId) {
		this.employeeService.deleteEmployeeById(employeeId);
	}
	
	@GetMapping("/search/{name}")
	public List<Employee> fetchEmployeesByFirstName(@PathVariable("name") String firstName) {
		return this.employeeService.fetchEmployeesByFirstName(firstName);
	}
	
	@GetMapping("/sort")
	public List<Employee> fetchEmployeesSortedByFirstName(@RequestParam(value = "order", defaultValue = AppConstants.DEFAULT_SORT_DIRECTION, required = false) String sortDir) {
		return this.employeeService.fetchEmployeesSortedByFirstName(sortDir);
	}
}
